<?php
/*
Plugin Name: xAPI MozBadge
Plugin Script: xapimozbadge.php
Plugin URI: http://.../xapimozbadge (where should people go for this plugin?)
Description: This plugin was developed as an ADL design team project for the Experience API
Version: 0.1
License: GPL
Author: Dustin Vietzke
Author URI: http://vitzkrieg.net

=== RELEASE NOTES ===
2013-09-18 - v1.0 - first version
*/

/*
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
Online: http://www.gnu.org/licenses/gpl.txt
*/

/*
|--------------------------------------------------------------------------
| CONSTANTS
|--------------------------------------------------------------------------
*/

if ( ! defined( 'XAPIMOZBADGE_BASE_FILE' ) )
    define( 'XAPIMOZBADGE_BASE_FILE', __FILE__ );

if ( ! defined( 'XAPIMOZBADGE_BASE_DIR' ) )
    define( 'XAPIMOZBADGE_BASE_DIR', dirname( XAPIMOZBADGE_BASE_FILE ) );

if ( ! defined( 'XAPIMOZBADGE_PLUGIN_URL' ) )
    define( 'XAPIMOZBADGE_PLUGIN_URL', plugin_dir_url( __FILE__ ) );

if ( ! defined( 'XAPIMOZBADGE_TEMPLATE_URL' ) )
    define( 'XAPIMOZBADGE_TEMPLATE_URL', XAPIMOZBADGE_PLUGIN_URL . "templates" );

if ( ! defined( 'XAPIMOZBADGE_JS_URL' ) )
    define( 'XAPIMOZBADGE_JS_URL', XAPIMOZBADGE_PLUGIN_URL . "js" );


/**
 * Get the custom template if is set
 *
 * @since 1.0
 */

function xapimozbadge_template_hierarchy( $template ) {

    // Get the template slug
    $template_slug = rtrim( $template, '.php' );
    $template = $template_slug . '.php';

    // Check if a custom template exists in the theme folder,
    // if not, load the plugin template file
    if ( $theme_file = locate_template( array( '/xapimozbadge_template/' . $template ) ) ) {
        $file = $theme_file;
    }
    else {
       $file = XAPIMOZBADGE_BASE_DIR . '/templates/' . $template;
    }

    return apply_filters( 'xapimozbadge_repl_template_' . $template, $file );
}

/*
|--------------------------------------------------------------------------
| FILTERS
|--------------------------------------------------------------------------
*/

add_filter( 'template_include', 'xapimozbadge_template_chooser');

/*
|--------------------------------------------------------------------------
| PLUGIN FUNCTIONS
|--------------------------------------------------------------------------
*/

/**
 * Returns template file
 *
 * @since 1.0
 */

function xapimozbadge_template_chooser( $template ) {

	$post_slug = $post->post_name;

    // For all other CPT
    //if ( $post_slug != 'ckeditor-test-page' ) {
        //return $template;
    //}

	//return xapimozbadge_template_hierarchy( 'page-xapimozbadge' );

    // Post ID
    $post_id = get_the_ID();

    // For all other CPT
    if ( get_post_type( $post_id ) != 'xapimozbadge' ) {
        return $template;
    }

    // Else use custom template
    if ( is_single() ) {
       return xapimozbadge_template_hierarchy( 'page-xapimozbadge' );
    }

    return $template;

}


/*
|--------------------------------------------------------------------------
| CUSTOM POST TYPE FUNCTIONS
|--------------------------------------------------------------------------
*/


// Register Custom Post Type
function register_xapimozbadge_post_type() {

    $labels = array(
        'name'                => _x( 'xAPI MozBadges', 'Post Type General Name', 'xAPI MozBadge' ),
        'singular_name'       => _x( 'xAPI MozBadge', 'Post Type Singular Name', 'xAPI MozBadge' ),
        'menu_name'           => __( 'xAPI MozBadge', 'xAPI MozBadge' ),
        'parent_item_colon'   => __( 'Parent xAPI MozBadge', 'xAPI MozBadge' ),
        'all_items'           => __( 'All xAPI MozBadge', 'xAPI MozBadge' ),
        'view_item'           => __( 'View xAPI MozBadge', 'xAPI MozBadge' ),
        'add_new_item'        => __( 'Add New xAPI MozBadge', 'xAPI MozBadge' ),
        'add_new'             => __( 'New xAPI MozBadge', 'xAPI MozBadge' ),
        'edit_item'           => __( 'Edit xAPI MozBadge', 'xAPI MozBadge' ),
        'update_item'         => __( 'Update xAPI MozBadge', 'xAPI MozBadge' ),
        'search_items'        => __( 'Search xAPI MozBadges', 'xAPI MozBadge' ),
        'not_found'           => __( 'No xAPI MozBadges found', 'xAPI MozBadge' ),
        'not_found_in_trash'  => __( 'No xAPI MozBadges found in Trash', 'xAPI MozBadge' ),
    );
    $rewrite = array(
        'slug'                => 'xapimozbadge',
        'with_front'          => true,
        'pages'               => true,
        'feeds'               => true,
    );
    $capabilities = array(
        'edit_post'           => 'edit_xapimozbadge',
        'read_post'           => 'read_xapimozbadge',
        'delete_post'         => 'delete_xapimozbadge',
        'edit_posts'          => 'edit_xapimozbadges',
        'edit_others_posts'   => 'edit_others_xapimozbadges',
        'publish_posts'       => 'publish_xapimozbadges',
        'read_private_posts'  => 'read_private_xapimozbadges',
    );
    $args = array(
        'label'               => __( 'xapimozbadge', 'xapimozbadge' ),
        'description'         => __( 'xAPI MozBadge Posts', 'xAPI MozBadge' ),
        'labels'              => $labels,
        'supports'            => array( 'title', 'editor', 'excerpt', 'author', 'revisions', 'custom-fields', 'page-attributes', 'post-formats', ),
        'taxonomies'          => array( 'mozbadge' ),
        'hierarchical'        => true,
        'public'              => true,
        'show_ui'             => true,
        'show_in_menu'        => true,
        'show_in_nav_menus'   => true,
        'show_in_admin_bar'   => true,
        'menu_position'       => 5,
        'menu_icon'           => '',
        'can_export'          => true,
        'has_archive'         => true,
        'exclude_from_search' => false,
        'publicly_queryable'  => true,
        'query_var'           => 'xapimozbadge',
        'rewrite'             => $rewrite,
        'capabilities'        => $capabilities,
    );
    register_post_type( 'xapimozbadge', $args );

}

// Hook into the 'init' action
add_action( 'init', 'register_xapimozbadge_post_type', 0 );


/*
|--------------------------------------------------------------------------
| CUSTOM TAXONOMY FUNCTIONS
|--------------------------------------------------------------------------
*/


if ( ! function_exists('mozbadge_taxonomy') ) {

// Register Custom Taxonomy
function mozbadge_taxonomy()  {

    $labels = array(
        'name'                       => _x( 'MozBadges', 'Taxonomy General Name', 'xapimozbadge' ),
        'singular_name'              => _x( 'MozBadge', 'Taxonomy Singular Name', 'xapimozbadge' ),
        'menu_name'                  => __( 'MozBadge', 'xapimozbadge' ),
        'all_items'                  => __( 'All MozBadges', 'xapimozbadge' ),
        'parent_item'                => __( 'Parent MozBadge', 'xapimozbadge' ),
        'parent_item_colon'          => __( 'Parent MozBadge:', 'xapimozbadge' ),
        'new_item_name'              => __( 'New MozBadge Name', 'xapimozbadge' ),
        'add_new_item'               => __( 'Add New MozBadge', 'xapimozbadge' ),
        'edit_item'                  => __( 'Edit MozBadge', 'xapimozbadge' ),
        'update_item'                => __( 'Update MozBadge', 'xapimozbadge' ),
        'separate_items_with_commas' => __( 'Separate MozBadges with commas', 'xapimozbadge' ),
        'search_items'               => __( 'Search MozBadges', 'xapimozbadge' ),
        'add_or_remove_items'        => __( 'Add or remove MozBadges', 'xapimozbadge' ),
        'choose_from_most_used'      => __( 'Choose from the most used MozBadges', 'xapimozbadge' ),
    );
    $rewrite = array(
        'slug'                       => 'mozbadge',
        'with_front'                 => true,
        'hierarchical'               => true,
    );
    $capabilities = array(
        'manage_terms'               => 'manage_mozbadges',
        'edit_terms'                 => 'edit_mozbadges',
        'delete_terms'               => 'delete_mozbadges',
        'assign_terms'               => 'assign_mozbadges',
    );
    $args = array(
        'labels'                     => $labels,
        'hierarchical'               => true,
        'public'                     => true,
        'show_ui'                    => true,
        'show_admin_column'          => true,
        'show_in_nav_menus'          => true,
        'show_tagcloud'              => true,
        'query_var'                  => 'mozbadge',
        'rewrite'                    => $rewrite,
        'capabilities'               => $capabilities,
    );
    register_taxonomy( 'mozbadge', 'xapimozbadge', $args );

}

// Hook into the 'init' action
add_action( 'init', 'mozbadge_taxonomy', 0 );

}


add_filter( 'map_meta_cap', 'my_map_meta_cap', 10, 4 );

function my_map_meta_cap( $caps, $cap, $user_id, $args ) {

    /* If editing, deleting, or reading a movie, get the post and post type object. */
    if ( 'edit_xapimozbadge' == $cap || 'delete_xapimozbadge' == $cap || 'read_xapimozbadge' == $cap ) {
        $post = get_post( $args[0] );
        $post_type = get_post_type_object( $post->post_type );

        /* Set an empty array for the caps. */
        $caps = array();
    }

    /* If editing a movie, assign the required capability. */
    if ( 'edit_xapimozbadge' == $cap ) {
        if ( $user_id == $post->post_author )
            $caps[] = $post_type->cap->edit_posts;
        else
            $caps[] = $post_type->cap->edit_others_posts;
    }

    /* If deleting a movie, assign the required capability. */
    elseif ( 'delete_xapimozbadge' == $cap ) {
        if ( $user_id == $post->post_author )
            $caps[] = $post_type->cap->delete_posts;
        else
            $caps[] = $post_type->cap->delete_others_posts;
    }

    /* If reading a private movie, assign the required capability. */
    elseif ( 'read_xapimozbadge' == $cap ) {

        if ( 'private' != $post->post_status )
            $caps[] = 'read';
        elseif ( $user_id == $post->post_author )
            $caps[] = 'read';
        else
            $caps[] = $post_type->cap->read_private_posts;
    }

    /* Return the capabilities required by the user. */
    return $caps;
}



?>